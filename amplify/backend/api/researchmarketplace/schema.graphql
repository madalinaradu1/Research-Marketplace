type User @model @auth(rules: [{allow: owner}, {allow: owner, ownerField: "id", operations: [update]}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Coordinator", "Faculty"], operations: [read]}, {allow: private, operations: [read]}]) {
  id: ID!
  name: String!
  email: String!
  role: String!
  department: String
  major: String
  academicYear: String
  gpa: Float
  skills: [String]
  researchInterests: [String]
  careerInterests: [String]
  resumeKey: String
  affiliation: String
  profileComplete: Boolean
  status: String
  applicationCount: Int # Track number of applications (max 3)
  expectedGraduation: String
  availability: String
  personalStatement: String
  certificates: [String]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  facultyProjects: [Project] @hasMany(indexName: "byFaculty", fields: ["id"])
  studentApplications: [Application] @hasMany(indexName: "byStudent", fields: ["id"])
  sentMessages: [Message] @hasMany(indexName: "bySender", fields: ["id"])
  receivedMessages: [Message] @hasMany(indexName: "byReceiver", fields: ["id"])
  notifications: [Notification] @hasMany(indexName: "byUser", fields: ["id"])
  activityLogs: [ActivityLog] @hasMany(indexName: "byUser", fields: ["id"])
  messageBoards: [MessageBoard] @hasMany(indexName: "byFaculty", fields: ["id"])
  studentPosts: [StudentPost] @hasMany(indexName: "byStudent", fields: ["id"])
}

type Project @model @auth(rules: [{allow: owner, ownerField: "facultyID"}, {allow: groups, groups: ["Coordinator", "Admin"]}, {allow: groups, groups: ["Student"], operations: [read]}]) {
  id: ID!
  title: String!
  description: String!
  department: String
  skillsRequired: [String]
  tags: [String] # Research tags like lab, field, geology, code, etc.
  qualifications: String # Required qualifications/courses
  duration: String
  applicationDeadline: AWSDateTime
  facultyID: ID! @index(name: "byFaculty")
  faculty: User @belongsTo(fields: ["facultyID"])
  isActive: Boolean
  requiresTranscript: Boolean
  
  # New approval workflow fields
  projectStatus: String! # Draft, Coordinator Review, Returned, Approved, Published, Filled
  coordinatorNotes: String
  rejectionReason: String
  selectedStudentID: ID
  filledAt: AWSDateTime
  
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  applications: [Application] @hasMany(indexName: "byProject", fields: ["id"])
  messageBoards: [MessageBoard] @hasMany(indexName: "byProject", fields: ["id"])
}

type Application @model @auth(rules: [{allow: private}]) {
  id: ID!
  studentID: ID! @index(name: "byStudent")
  student: User @belongsTo(fields: ["studentID"])
  projectID: ID! @index(name: "byProject")
  project: Project @belongsTo(fields: ["projectID"])
  
  # Application content
  statement: String!
  resumeKey: String
  transcriptLink: AWSURL
  documentKey: String
  relevantCourses: [RelevantCourse]
  
  # Status tracking - New simplified workflow
  status: String! # Draft, Coordinator Review, Faculty Review, Approved, Returned, Rejected, Cancelled, Expired
  statusDetail: String
  
  # Notes
  facultyNotes: String
  coordinatorNotes: String
  withdrawReason: String
  rejectionReason: String
  acceptanceReason: String
  
  # Selection tracking
  isSelected: Boolean
  selectedAt: AWSDateTime
  
  # Timestamps
  submittedToFacultyAt: AWSDateTime
  submittedToDepartmentAt: AWSDateTime
  submittedToAdminAt: AWSDateTime
  approvedAt: AWSDateTime
  returnedAt: AWSDateTime
  rejectedAt: AWSDateTime
  cancelledAt: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  
  # Learning contract
  learningContract: LearningContract @hasOne
}

type RelevantCourse {
  courseName: String!
  courseNumber: String
  grade: String
  semester: String
  year: String
}

type LearningContract @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Faculty", "Coordinator", "Admin"]}]) {
  id: ID!
  applicationID: ID! @index(name: "byApplication")
  application: Application @belongsTo(fields: ["applicationID"])
  researchSchedule: String!
  researchRequirements: String!
  learningObjectives: String!
  evaluationCriteria: String!
  mentorApproved: Boolean
  studentConfirmed: Boolean
  submittedAt: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type MessageBoard @model @auth(rules: [{allow: groups, groups: ["Faculty", "Coordinator", "Admin"]}, {allow: private, operations: [read]}]) {
  id: ID!
  facultyID: ID! @index(name: "byFaculty")
  faculty: User @belongsTo(fields: ["facultyID"])
  projectID: ID! @index(name: "byProject")
  project: Project @belongsTo(fields: ["projectID"])
  title: String!
  content: String!
  isPublic: Boolean
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Message @model @auth(rules: [{allow: owner}, {allow: private, operations: [read, update, create]}, {allow: groups, groups: ["Faculty", "Coordinator", "Admin"]}]) {
  id: ID!
  senderID: ID! @index(name: "bySender")
  sender: User @belongsTo(fields: ["senderID"])
  receiverID: ID! @index(name: "byReceiver")
  receiver: User @belongsTo(fields: ["receiverID"])
  subject: String
  body: String!
  isRead: Boolean
  sentAt: AWSDateTime
  readAt: AWSDateTime
  threadID: String @index(name: "byThread")
  projectID: ID
  messageType: MessageType
  parentMessageID: ID @index(name: "byParent")
  parentMessage: Message @belongsTo(fields: ["parentMessageID"])
  replies: [Message] @hasMany(indexName: "byParent", fields: ["id"])
}

enum MessageType {
  DIRECT
  PROJECT_RELATED
  SYSTEM
  REPLY
}

type Notification @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admin"]}]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
  type: String!
  message: String!
  isRead: Boolean
  createdAt: AWSDateTime
}

type ActivityLog @model @auth(rules: [{allow: groups, groups: ["Admin"]}]) {
  id: ID!
  userID: ID @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
  action: String!
  resourceType: String!
  resourceID: ID
  detail: String
  timestamp: AWSDateTime!
}

type StudentPost @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admin", "Faculty", "Coordinator"]}, {allow: groups, groups: ["Student"], operations: [read]}]) {
  id: ID!
  studentID: ID! @index(name: "byStudent")
  student: User @belongsTo(fields: ["studentID"])
  type: PostType!
  title: String!
  description: String!
  department: String
  researchAreas: [String]
  skillsOffered: [String]
  skillsNeeded: [String]
  timeCommitment: String
  isActive: Boolean
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

enum PostType {
  RESEARCH_INTEREST
  MENTOR_WANTED
  RESEARCH_IDEA
} 

type DeletedUser @model @auth(rules: [{allow: groups, groups: ["Admin"]}]) {
  id: ID!
  originalUserID: ID!
  name: String!
  email: String!
  role: String!
  deletionScheduledAt: AWSDateTime!
  deletionExecutedAt: AWSDateTime
  isTestMode: Boolean
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type SystemConfig @model @auth(rules: [{allow: groups, groups: ["Admin"]}]) {
  id: ID!
  maintenanceMode: Boolean
  registrationEnabled: Boolean
  twoFactorRequired: Boolean
  passwordMinLength: Int
  sessionTimeout: Int
  maxApplications: Int
  updatedAt: AWSDateTime
}