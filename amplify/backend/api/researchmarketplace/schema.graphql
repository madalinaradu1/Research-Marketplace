type User @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admin", "Coordinator"] }
]) {
  id: ID!
  name: String!
  email: String!
  role: String! # Student, Faculty, Coordinator, Admin
  department: String
  major: String
  academicYear: String
  gpa: Float
  skills: [String]
  researchInterests: [String]
  resumeKey: String
  affiliation: String # On-campus / Off-campus
  profileComplete: Boolean
  status: String # Active, Suspended
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  # Relationships
  facultyProjects: [Project] @hasMany(indexName: "byFaculty", fields: ["id"])
  studentApplications: [Application] @hasMany(indexName: "byStudent", fields: ["id"])
  sentMessages: [Message] @hasMany(indexName: "bySender", fields: ["id"])
  receivedMessages: [Message] @hasMany(indexName: "byReceiver", fields: ["id"])
  notifications: [Notification] @hasMany(indexName: "byUser", fields: ["id"])
  activityLogs: [ActivityLog] @hasMany(indexName: "byUser", fields: ["id"])
}

type Project @model @auth(rules: [
  { allow: groups, groups: ["Faculty", "Coordinator", "Admin"] },
  { allow: private, operations: [read] }
]) {
  id: ID!
  title: String!
  description: String!
  department: String
  skillsRequired: [String]
  duration: String
  applicationDeadline: AWSDateTime
  facultyID: ID! @index(name: "byFaculty")
  faculty: User @belongsTo(fields: ["facultyID"])
  isActive: Boolean
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  applications: [Application] @hasMany(indexName: "byProject", fields: ["id"])
}

type Application @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Faculty", "Coordinator", "Admin"] }
]) {
  id: ID!
  studentID: ID! @index(name: "byStudent")
  student: User @belongsTo(fields: ["studentID"])
  projectID: ID! @index(name: "byProject")
  project: Project @belongsTo(fields: ["projectID"])
  
  # Step 1 fields
  term: String!
  facultySupervisorID: ID!
  facultySupervisor: User @belongsTo(fields: ["facultySupervisorID"])
  department: String!
  
  # Step 2 fields
  location: String
  directSupervisorName: String
  directSupervisorEmail: String
  paymentType: String # Pay, Credit, Volunteer
  paymentAmount: Float
  creditHours: Int
  projectTitle: String!
  proposalText: String!
  proposalFileKey: String
  
  # Step 3 fields
  requiresTravel: Boolean
  travelDetails: String
  
  # Application status
  status: String! # Draft, Faculty Review, Department Review, Admin Review, Approved, Returned, Rejected, Cancelled, Expired
  statusDetail: String # Additional status details like "info missing", "travel forms missing", etc.
  withdrawReason: String
  
  # Notes
  facultyNotes: String
  coordinatorNotes: String
  adminNotes: String
  
  # Timestamps
  submittedToFacultyAt: AWSDateTime
  submittedToDepartmentAt: AWSDateTime
  submittedToAdminAt: AWSDateTime
  approvedAt: AWSDateTime
  returnedAt: AWSDateTime
  rejectedAt: AWSDateTime
  cancelledAt: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Message @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Faculty", "Coordinator", "Admin"] }
]) {
  id: ID!
  senderID: ID! @index(name: "bySender")
  sender: User @belongsTo(fields: ["senderID"])
  receiverID: ID! @index(name: "byReceiver")
  receiver: User @belongsTo(fields: ["receiverID"])
  subject: String
  body: String!
  isRead: Boolean
  sentAt: AWSDateTime
  readAt: AWSDateTime
}

type Notification @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admin"] }
]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
  type: String! # Application, Message, System
  message: String!
  isRead: Boolean
  createdAt: AWSDateTime
}

type ActivityLog @model @auth(rules: [
  { allow: groups, groups: ["Admin"] }
]) {
  id: ID!
  userID: ID @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
  action: String! # Created, Updated, Deleted, Applied, etc.
  resourceType: String! # User, Project, Application, etc.
  resourceID: ID
  detail: String
  timestamp: AWSDateTime!
}
